#!/bin/bash
# shellcheck shell=bash disable=SC1090,SC1091,SC2015
# For bash AND ZSH

######################
###### USER MOD ######
######################

###### 1. UNIVERSAL HELPERS ######

export EDITOR=/usr/bin/vim
export PAGER="less -RF"

# one-line function ends in semicolon
function pathq { echo "$PATH" | grep -q "$1"; }
function whichq { command -v "$@" &>/dev/null; }
function source-try { [[ -r "$1" ]] && source "$1" || true; }

alias pathp='echo $PATH | tr ":" "\n"'
# ls aliases
#alias ll='ls -alF'
alias ll='ls -alhF --group-directories-first'
alias la='ls -A'
alias l='ls -CF'
# interactive (safe) operations
alias rm='rm -iv'
alias cp='cp -i'
alias mv='mv -i'
# 'vi' points to vim
alias vi=vim

# Chinese
alias env-zh='env LANG=zh_CN.UTF-8'
alias fc-list-zh="fc-list :lang=zh"
# read line
alias whilereadline='while IFS='"''"' read -r line || [[ -n "$line" ]]'
# set -x & trap
# shellcheck disable=SC2034
set_trap="set -x; trap 'zsh -i; trap - EXIT' EXIT HUP INT QUIT PIPE TERM"

# path remover
function pathrm {
	[ "$(echo "$PATH" | wc -l)" -eq 1 ] && [ $# -eq 1 ] && [ "$1" != '' ] \
		&& export PATH_BACKUP=$PATH \
		&& PATH=$(
			p=$(echo "$PATH" \
				| tr ':' '\n' \
				| grep -v "$1" \
				| tr '\n' ':'
			); echo "${p%:}") \
		&& export PATH \
		&& pathp \
		|| ( echo "# PATH Un-change" && return 1 )
}
# archive extractor
function ex {
	if [[ -f "$1" ]] ; then
		case "$1" in
			*.tar.bz2)   tar xjf "$1"    ;;
			*.tar.gz)    tar xzf "$1"    ;;
			*.bz2)       bunzip2 "$1"    ;;
			*.rar)       unrar x "$1"    ;;
			*.gz)        gunzip "$1"     ;;
			*.tar)       tar xf "$1"     ;;
			*.tbz2)      tar xjf "$1"    ;;
			*.tgz)       tar xzf "$1"    ;;
			*.zip)       unzip "$1"      ;;
			*.Z)         uncompress "$1" ;;
			*.7z)        7z x "$1"       ;;
			*)           echo "# '$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "# '$1' is not a valid file"
		return 1
	fi
}
# file:// decode
function uridecode {
	: "${*//+/ }"
	echo -e "${_//%/\\x}" \
		| sed -e 's/file:\/\///g'
}
# vi history
function vi-history {
	local history_path
	if [[ -n "$ZSH_VERSION" ]] && [[ -r "$HOME/.zsh_history" ]]; then
		history_path="$HOME/.zsh_history"
	elif [[ -n "$BASH_VERSION" ]] && [[ -r "$HOME/.bash_history" ]]; then
		history_path="$HOME/.bash_history"
	fi
	vim "+normal Gh" "$history_path"
}

# shadowsocks server
[[ -r /etc/init.d/shadowsocks ]] && \
	alias shadowsocks='/etc/init.d/shadowsocks'
# SSH auth agent
[[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]] && [[ -n "$SSH_AUTH_SOCK" ]] && \
	echo "# SSH_AUTH_SOCK=$SSH_AUTH_SOCK" || true


###### 2. LOCAL HELPERS ######

# update env
pathq "$HOME/bin" || source-try "$HOME/.profile"

# pacman-update
whichq pacman && function pacman-upgrade {
    pacman-status "China"
    grep --color=always '^Server' /etc/pacman.d/mirrorlist \
        | sed -e 's/Server/Current/g'
    sudo pacman -Syu
}

# shutdown check
if whichq shutdown-checklist; then
	for cmd in 'shutdown' 'reboot' 'poweroff'; do
		# shellcheck disable=SC2139
		alias $cmd="shutdown-checklist && $cmd"
	done
fi

# custom: nb speed dial
alias nb="jupyter notebook"
# fix mma
alias Mathematica='env'\
' LD_PRELOAD="/usr/lib/libfreetype.so /usr/lib/libz.so"'\
' vblank_mode=0'\
' Mathematica -sl'

# git-secrets
GIT_SECRETS_DIR="$HOME/apps/git-secrets"
GIT_SECRETS_BIN="$GIT_SECRETS_DIR/bin"
if [ -d "$GIT_SECRETS_BIN" ]; then
	export GIT_SECRETS_BIN
	pathq "$GIT_SECRETS_BIN" || export PATH="$PATH:$GIT_SECRETS_BIN"
fi
[ -z ${MANPATH+x} ] || export MANPATH="$MANPATH:$GIT_SECRETS_DIR/share/man"


# added by Anaconda3 installer
CONDA_BIN="$HOME/apps/anaconda3/bin"
if [ -d "$CONDA_BIN" ]; then
	export CONDA_BIN
	pathq "$CONDA_BIN" || export PATH="$CONDA_BIN:$PATH"
fi

# cern ROOT
CERN_ROOT_BIN="$HOME/apps/cern/root/bin"
# shellcheck disable=SC2139
alias thisroot=". $CERN_ROOT_BIN/thisroot.sh"
# Only in interactive shell
[[ $- == *i* ]] && [[ -d "$CERN_ROOT_BIN" ]] && thisroot || true

# append system python packages
export PYTHONPATH="$PYTHONPATH:/usr/lib/python3.7/site-packages"
# prepend anaconda
CONDA_LIB_PY37="$HOME/apps/anaconda3/lib/python3.7"
# shellcheck disable=SC2140
[[ -d $CONDA_LIB_PY37 ]] && \
	export PYTHONPATH="$CONDA_LIB_PY37"\
":$CONDA_LIB_PY37/lib-dynload"\
":$CONDA_LIB_PY37/site-packages"\
":$PYTHONPATH"


###### 3. PRIVATE DATA ######

source-try "$HOME/.secrets"
source-try "$HOME/.tokens"


###### 4. USER-FRIENDLY ######

# wrap commands
function function-wrap {  # cmd, pre, post, name
	if [[ $# -lt 3 ]]; then
		echo "# Not enough arguments!"
		return 1
	else
		local cmd="$1" pre="$2" post="$3" name fullcmd
		[[ -n "$4" ]] \
			&& name="$4" \
			|| name="$cmd"
		fullcmd=$(command -v "$cmd") \
			&& eval "function $name {
				$fullcmd $pre \"\$@\" $post
			}" \
			|| true  # Don't worry, $cmd not installed
	fi
}
function alias-wrap {  # cmd, opt, name
	if [[ $# -lt 2 ]]; then
		echo "# Not enough arguments!"
		return 1
	else
		local cmd="$1" opt="$2" name
		[[ -n "$3" ]] \
			&& name="$3" \
			|| name="$cmd"
		whichq "$cmd" \
			&& eval "alias $name='$cmd $opt'" \
			|| true  # Don't worry, $cmd not installed
	fi
}

# silence output
disown_detach='&>/dev/null & disown'
noisy_apps=(
	'gedit'
	'google-chrome-stable'
)
for app in "${noisy_apps[@]}"; do
	function-wrap "$app" '' "$disown_detach"
done

function-wrap libreoffice '--view' "$disown_detach" 'libreoffice-view'
function-wrap shellcheck '--color=always' '| less -RF'
# shellcheck disable=SC2016
alias-wrap x0vncserver '--PasswordFile="$HOME/.vnc/passwd"'
alias-wrap gitkraken "--path=\"\$PWD\" $disown_detach"
alias-wrap nautilus "\"\$PWD\" $disown_detach" 'nautilus-here'
alias-wrap atom "\"\$PWD\"" 'atom-here'
alias-wrap glances "--process-short-name"
alias-wrap polipo "socksParentProxy=localhost:1080" 'polipo-channel-socks'
alias-wrap pygmentize "-f terminal256 -O style=native -g" 'pcat'
alias-wrap xset '-dpms' 'xset-dpms-off'
alias-wrap stat '-c " | %a | %A | %N" *' 'stat-ls'

# pacman alias
if whichq pacman; then
	alias pacman-clean='sudo pacman -Scc'
	alias pacman-autoclean='sudo pacman -Sc'
	alias pacman-rmdb='rm /var/lib/pacman/sync/*'
	alias pacdiff='DIFFSEARCHPATH="/boot /etc /usr" EDITOR="$EDITOR -d" DIFFPROG="sudoedit" pacdiff'
	function pacman-autoremove {
		if pacman -Qdtq &>/dev/null; then
			sudo pacman -Rs "$(pacman -Qdtq)"
		else
			echo "# No orphans! Nice!"
		fi
	}
	[[ $- == *i* ]] && function which {
		if [[ -n "$ZSH_VERSION" ]]; then
			pacman -Qo "$(builtin which "$1")" 2>/dev/null \
				|| builtin which "$1"
		elif [[ -n "$BASH_VERSION" ]]; then
			pacman -Qo "$(command -v "$1" 2>/dev/null)" 2>/dev/null \
				|| command -v "$1"
		fi
	}
fi

whichq lazygit && \
	function git { [[ $# -eq 0 ]] && lazygit || /usr/bin/git "$@"; }
whichq shalarm && \
	function shalarm-timer { shalarm "$(date +%H%M -d "$@")"; }
whichq powertop && \
	alias powertop='sudo powertop'
whichq adb && \
	function adb-rotate {
		if [[ $# -eq 0 ]]; then
			# auto rotation
			adb shell settings put system accelerometer_rotation 1
		elif [[ "$1" = 0 ]] || [[ "$1" = 1 ]]; then
			adb shell settings put system accelerometer_rotation 0
			adb shell settings put system user_rotation "$1"
		else
			echo "# Bad arguments! 0: portrait, 1: landscape."
			return 1
		fi
	}


###### AT LAST ######

# tilix: KEEP AT END OF FILE
if [[ "$TILIX_ID" ]] || [[ "$VTE_VERSION" ]]; then
	source /etc/profile.d/vte.sh
fi
